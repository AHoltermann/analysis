// Tell emacs that this is a C++ source
//  -*- C++ -*-.
#ifndef ISOLATEDTRACKANALYSIS_H
#define ISOLATEDTRACKANALYSIS_H


#include <fun4all/SubsysReco.h>

#include <string>
#include <vector>

class TFile;
class TTree;
class PHCompositeNode;
class RawClusterContainer;
class RawCluster;
class SvtxTrackMap;
class SvtxTrack;
class SvtxTrackState;
class SvtxVertexMap;
class SvtxEvalStack;
class PHHepMCGenEventMap;
class PHHepMCGenEvent;
class P4G4TruthInfoContainer;
class P4G4TruthInfo;

class IsolatedTrackAnalysis : public SubsysReco
{
  public:
    IsolatedTrackAnalysis(const std::string &name = "IsolatedTrackAnalysis",
                          const std::string &fname = "IsolatedTrackAnalysis.root");
    ~IsolatedTrackAnalysis() override;

    int Init(PHCompositeNode *topNode) override;
    int InitRun(PHCompositeNode *topNode) override;
    int process_event(PHCompositeNode *topNode) override;
    int ResetEvent(PHCompositeNode *topNode) override;
    int End(PHCompositeNode *topNode) override;

    void setMinClusterEnergy(float minClusterEnergy) { m_minClusterEnergy = minClusterEnergy; }

    void analyzeTracks(bool doAnalyzeTracks) { m_analyzeTracks = doAnalyzeTracks; }
    void analyzeClusters(bool doAnalyzeClusters) { m_analyzeClusters = doAnalyzeClusters; }
    void analyzeHepMCTruth(bool doAnalyzeHepMCTruth) { m_analyzeHepMCTruth = doAnalyzeHepMCTruth; }
    void analyzeG4Truth(bool doAnalyzeG4Truth) { m_analyzeG4Truth = doAnalyzeG4Truth; }
    
  private:
    /// String to contain the outfile name containing the trees
    std::string m_outputFileName;

    /// A float for cutting on cluster energy
    float m_minClusterEnergy;

    /// A boolean for running over tracks
    bool m_analyzeTracks;

    /// A boolean for running over clusters
    bool m_analyzeClusters;
    
    /// A boolean for collecting hepmc information
    bool m_analyzeHepMCTruth;

    /// A boolean for collecting g4 information
    bool m_analyzeG4Truth;

    /// TFile to hold the following TTrees and histograms
    TFile *m_outputFile;
    TTree *m_tracktree;
    TTree *m_clustertree;
    //TTree *m_hepmctree;
    //TTree *m_g4tree;

    SvtxEvalStack *m_svtxEvalStack = nullptr;

    /// Counter
    int counter;

    /// Methods for grabbing the data
    void getTracks(PHCompositeNode *topNode);
    void getClusters(PHCompositeNode *topNode);
    void getHepMCTruth(PHCompositeNode *topNode);
    void getG4Truth(PHCompositeNode *topNode);

    void initializeTrees(); 
    void initializeVariables(); 

    // Track helper functions
    float calculateProjectionEta(SvtxTrackState *projectedState);        
    float calculateProjectionPhi(SvtxTrackState *projectedState);        
    void calculateDCA(SvtxTrack* track, SvtxVertexMap* vertexmap, float& dca3dxy, float& dca3dz, float& dca3dxysigma, float& dca3dzsigma);

    // Calorimeter radii
    float m_cemcRadius;
    float m_ihcalRadius;
    float m_ohcalRadius;

    // Basic track properties
    std::vector<float> m_tr_p;
    std::vector<float> m_tr_pt;
    std::vector<float> m_tr_eta;
    std::vector<float> m_tr_phi;
    std::vector<int> m_tr_charge;
    std::vector<float> m_tr_chisq;
    std::vector<int> m_tr_ndf;
  
    // Distance of closest approach
    std::vector<float> m_tr_dca_xy;
    std::vector<float> m_tr_dca_xy_error;
    std::vector<float> m_tr_dca_z;
    std::vector<float> m_tr_dca_z_error;

    // Initial point of track
    std::vector<float> m_tr_x;
    std::vector<float> m_tr_y;
    std::vector<float> m_tr_z;

    // Vertex id of track
    std::vector<int> m_tr_vertex_id;

    // Vertex ids and positions, also stored on track tree
    std::vector<int> m_vertex_id;
    std::vector<float> m_vx;
    std::vector<float> m_vy;
    std::vector<float> m_vz;

    // Projection of track to calorimeters
    // CEMC
    std::vector<float> m_tr_cemc_eta;
    std::vector<float> m_tr_cemc_phi;
    // Inner HCAL
    std::vector<float> m_tr_ihcal_eta;
    std::vector<float> m_tr_ihcal_phi;
    /// Outer HCAL
    std::vector<float> m_tr_ohcal_eta;
    std::vector<float> m_tr_ohcal_phi;

    // Matched truth track
    std::vector<int> m_tr_truth_is_primary;
    std::vector<int> m_tr_truth_pid;
    std::vector<float> m_tr_truth_e;
    std::vector<float> m_tr_truth_pt;
    std::vector<float> m_tr_truth_eta;
    std::vector<float> m_tr_truth_phi;

    ///////////////////////
    // Cluster variables //
    ///////////////////////
 
    // CEMC clusters
    std::vector<float> m_cl_cemc_e;
    std::vector<float> m_cl_cemc_eta;
    std::vector<float> m_cl_cemc_phi;
    std::vector<float> m_cl_cemc_r;
    std::vector<float> m_cl_cemc_z;

    // Inner HCAL clusters
    std::vector<float> m_cl_ihcal_e;
    std::vector<float> m_cl_ihcal_eta;
    std::vector<float> m_cl_ihcal_phi;
    std::vector<float> m_cl_ihcal_r;
    std::vector<float> m_cl_ihcal_z;

    // Outer HCAL clusters
    std::vector<float> m_cl_ohcal_e;
    std::vector<float> m_cl_ohcal_eta;
    std::vector<float> m_cl_ohcal_phi;
    std::vector<float> m_cl_ohcal_r;
    std::vector<float> m_cl_ohcal_z;
    
    /////////////////////////
    // HepMC particle tree //
    /////////////////////////

    /*int m_partid1;
    int m_partid2;
    float m_x1;
    float m_x2;
    int m_mpi;
    int m_process_id;
  
    std::vector<int> m_hepmc_pid;
    std::vector<float> m_hepmc_e;
    std::vector<float> m_hepmc_pt;
    std::vector<float> m_hepmc_eta;
    std::vector<float> m_hepmc_phi;

    //////////////////////
    // G4 particle tree //
    //////////////////////

    std::vector<int> m_g4_pid;
    std::vector<float> m_g4_e;
    std::vector<float> m_g4_pt;
    std::vector<float> m_g4_eta;
    std::vector<float> m_g4_phi;*/
};

#endif // ISOLATEDTRACKANALYSIS_H
